@page "/hmac"
@inject IJSRuntime JS

<PageTitle>HMAC</PageTitle>

<div class="container d-flex flex-column gap-4">
    <h4 class="text-center">Generowanie HMAC</h4>

    <div class="container-fluid d-flex flex-column gap-2">
        <div>
            <label for="message">Wiadomość:</label>
            <input type="text" id="message" @bind="Message" />
        </div>
        <div>
            <label for="key">Klucz:</label>
            <input type="text" id="key" @bind="Key" />
        </div>
        <div>
            <label for="algorithm">Algorytm (np. SHA-256):</label>
            <select id="algorithm" @bind="Algorithm">
                <option>SHA-256</option>
                <option>SHA-1</option>
                <option>SHA-512</option>
            </select>
        </div>
        <button @onclick="GenerateHMAC">Generuj HMAC</button>
    </div>

    @if (!string.IsNullOrEmpty(HMACResult))
    {
        <div class="container-fluid d-flex flex-column gap-2">
            <h5>Wynik HMAC:</h5>
            <textarea readonly>@HMACResult</textarea>
        </div>
    }

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
</div>

@code {
    private string Message { get; set; } = string.Empty;
    private string Key { get; set; } = string.Empty;
    private string Algorithm { get; set; } = "SHA-256";
    private string HMACResult { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;

    private async Task GenerateHMAC()
    {
        try
        {
            ErrorMessage = string.Empty;

            HMACResult = await JS.InvokeAsync<string>("generateHMAC", Message, Key, Algorithm);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Błąd: {ex.Message}";
        }
    }
}
